// Copyright 2017 The Dawn Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "SampleUtils.h"

#include <vector>


class MulModel : public utils::WrappedModel {
public:
  MulModel() {}
  wnn::Operand GenerateOutput(wnn::ModelBuilder nn) override {
    wnn::Operand input = nn.Input("input", InputDesc());
    wnn::Operand constant =
        nn.Constant(ConstantDesc(), ConstantBuffer(), product(ConstantShape()));
    return nn.Mul(input, constant);
  }
};

int main(int argc, const char* argv[]) {
  MulModel *mul = new MulModel();
  mul->SetInput({3, 4, 5}, {5.6232101e-01,  1.3117781e-01, -1.4161869e+00,  2.0386910e-02, 9.1077393e-01,  7.4952751e-01, -2.8509337e-01, -1.6272701e+00, 1.0271618e+00,  4.2815253e-01, -7.7895027e-01,  9.7542489e-01, 3.9352554e-01,  9.7878903e-01, -6.0965502e-01,  6.6299748e-01, -1.1980454e+00, -7.7857232e-01, -9.8175555e-01, -2.8763762e-01, -3.2260692e-01, -7.4259090e-01, -1.0055183e+00, -1.4305019e+00, 6.0624069e-01, -1.5911928e-01,  4.5598033e-01,  1.0880016e-01, 1.4949993e+00,  6.6210419e-01, -5.6889033e-01, -2.0945708e-01, -7.1049523e-01, -2.8507587e-01,  1.1723405e+00, -6.3937567e-02, -5.4250038e-01, -1.2398884e+00, -1.0347517e+00,  1.2763804e+00, -1.5979607e+00, -5.8152825e-01, -5.0100851e-01, -1.0742084e+00, -1.1273566e+00,  3.4815140e-04, -5.6024802e-01,  1.0848801e+00, -5.1780093e-01, -3.8996863e-01,  5.3133094e-01,  2.3897937e-01, -1.3832775e+00,  6.3414145e-01,  1.0691971e+00,  5.7040757e-01, 3.0711100e-01,  8.8405716e-01, -2.1583509e+00,  4.3243581e-01});
  mul->SetConstant({3, 4, 5}, {2.0435283 ,  0.07213961, -1.1644137 , -1.2209045 ,  0.8982674 ,     0.21796915,  0.27658972,  0.7744382 , -0.52159035, -0.969913  ,     0.6081186 , -0.04225572,  0.3275312 , -0.06443629, -2.257355  ,     1.7802691 , -1.279233  , -3.1389477 , -1.1663845 , -0.79485595,     0.679013  ,  1.0919031 ,  0.51905185,  1.3186365 ,  0.6612518 ,     0.40741763,  0.05208012,  0.16548257, -0.4570541 ,  0.10149371,     0.08249464,  0.3992067 , -0.3945879 , -0.37389037,  1.4760005 ,     -0.781274  , -0.49022308,  0.27020553, -0.2356837 ,  0.13846985,     0.9767852 , -1.3560135 ,  0.78826934, -0.18788454,  0.38178417,     0.9748209 ,  1.0242884 ,  0.7939937 ,  0.24449475, -1.3840157 ,     1.9665064 ,  0.35833818, -0.87076694, -0.76727265,  0.6157508 ,     -0.5558823 ,  0.18417479, -0.93904793, -0.00859687,  0.5034271});
  mul->SetExpectedBuffer({1.1491189e+00,  9.4631165e-03,  1.6490275e+00, -2.4890469e-02, 8.1811851e-01,  1.6337387e-01, -7.8853898e-02, -1.2602202e+00, -5.3575772e-01, -4.1527072e-01, -4.7369415e-01, -4.1217282e-02, 1.2889189e-01, -6.3069537e-02,  1.3762078e+00,  1.1803139e+00, 1.5325792e+00,  2.4438977e+00,  1.1451044e+00,  2.2863047e-01, -2.1905430e-01, -8.1083733e-01, -5.2191615e-01, -1.8863121e+00, 4.0087774e-01, -6.4828001e-02,  2.3747511e-02,  1.8004529e-02, -6.8329555e-01,  6.7199409e-02, -4.6930403e-02, -8.3616674e-02, 2.8035283e-01,  1.0658713e-01,  1.7303753e+00,  4.9952760e-02, 2.6594621e-01, -3.3502471e-01,  2.4387409e-01,  1.7674020e-01, -1.5608643e+00,  7.8856015e-01, -3.9492965e-01,  2.0182715e-01, -4.3040693e-01,  3.3938527e-04, -5.7385558e-01,  8.6138797e-01, -1.2659961e-01,  5.3972268e-01,  1.0448657e+00,  8.5635431e-02, 1.2045124e+00, -4.8655939e-01,  6.5835893e-01, -3.1707945e-01, 5.6562103e-02, -8.3017206e-01,  1.8555066e-02,  2.1769990e-01});
  utils::Compile(mul);
}
