# Copyright 2020 The Dawn Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../scripts/dawn_overrides_with_defaults.gni")

import("//build_overrides/build.gni")
import("${dawn_root}/generator/dawn_generator.gni")
import("${dawn_root}/scripts/dawn_component.gni")
import("${dawn_root}/scripts/dawn_features.gni")

# Import mac_min_system_version
if (is_mac) {
  if (dawn_has_build) {
    import("//build/config/mac/mac_sdk.gni")
  } else {
    mac_min_system_version = "10.11.0"
  }
}

config("dawn_native_internal") {
  configs = [ "${dawn_root}/src/common:dawn_internal" ]

  # Suppress warnings that Metal isn't in the deployment target of Chrome:
  # initialization of the Metal backend is behind a IsMetalSupported check so
  # Dawn won't call Metal functions on macOS 10.10.
  # At the time this is written Chromium supports 10.10.0 and above, so if we
  # aren't on 10.11 it means we are on 10.11 and above, and Metal is available.
  # Skipping this check on 10.11 and above is important as it allows getting
  # proper compilation warning when using 10.12 and above feature for example.
  # TODO(cwallez@chromium.org): Consider using API_AVAILABLE annotations on all
  # metal code in dawn once crbug.com/1004024 is sorted out if Chromium still
  # supports 10.10 then.
  if (is_mac && mac_min_system_version == "10.10.0") {
    cflags_objcc = [ "-Wno-unguarded-availability" ]
  }
}

config("dawn_native_weak_framework") {
  if (is_mac && dawn_enable_metal) {
    weak_frameworks = [ "Metal.framework" ]
  }
}

dawn_json_generator("dawn_native_utils_gen") {
  target = "dawn_native_utils"
  outputs = [
    "src/dawn_native/ProcTable.cpp",
    "src/dawn_native/wnn_structs_autogen.h",
    "src/dawn_native/wnn_structs_autogen.cpp",
    "src/dawn_native/ValidationUtils_autogen.h",
    "src/dawn_native/ValidationUtils_autogen.cpp",
  ]
}

# Public dawn_native headers so they can be publicly visible for
# dependencies of dawn_native
source_set("dawn_native_headers") {
  public_deps = [ "${dawn_root}/src/dawn:dawncpp_headers" ]
  all_dependent_configs = [ "${dawn_root}/src/common:dawn_public_include_dirs" ]
  sources = [
    "${dawn_root}/src/include/dawn_native/DawnNative.h",
    "${dawn_root}/src/include/dawn_native/dawn_native_export.h",
  ]
}

# The meat of the compilation for dawn_native so that we can cheaply have
# shared_library / static_library versions of it. It compiles all the files
# except those that define exported symbols.
source_set("dawn_native_sources") {
  deps = [
    ":dawn_native_headers",
    ":dawn_native_utils_gen",
    "${dawn_root}/src/common",
  ]
  defines = []
  libs = []
  data_deps = []

  configs += [ ":dawn_native_internal" ]

  sources = get_target_outputs(":dawn_native_utils_gen")

  sources += [
    "Compilation.cpp",
    "Compilation.h",
    "Error.cpp",
    "Error.h",
    "ErrorData.cpp",
    "ErrorData.h",
    "Model.cpp",
    "Model.h",
    "ModelBuilder.cpp",
    "ModelBuilder.h",
    "NamedInputs.h",
    "NamedOutputs.h",
    "NamedRecords.h",
    "NamedResults.h",
    "Operand.cpp",
    "Operand.h",
    "Result.cpp",
    "Result.h",
  ]

  sources += [
    "ops/binary.cc",
    "ops/binary.h",
    "ops/constant.cc",
    "ops/constant.h",
    "ops/conv2d.cc",
    "ops/conv2d.h",
    "ops/input.cc",
    "ops/input.h",
    "ops/matmul.cc",
    "ops/matmul.h",
    "ops/pool2d.cc",
    "ops/pool2d.h",
    "ops/relu.cc",
    "ops/relu.h",
    "ops/reshape.cc",
    "ops/reshape.h",
    "ops/softmax.cc",
    "ops/softmax.h",
    "ops/transpose.cc",
    "ops/transpose.h",
  ]

  sources += [
    "ie/compilation_ie.cc",
    "ie/compilation_ie.h",
    "ie/ienn_symbol_table.cc",
    "ie/ienn_symbol_table.h",
    "ie/late_binding_symbol_table.cc",
    "ie/late_binding_symbol_table.h",
    "ie/model_builder_ie.cc",
    "ie/model_builder_ie.h",
    "ie/model_ie.cc",
    "ie/model_ie.h",
  ]
}

# The static and shared libraries for dawn_native. Most of the files are
# already compiled in dawn_native_sources, but we still need to compile
# files defining exported symbols.
dawn_component("dawn_native") {
  DEFINE_PREFIX = "DAWN_NATIVE"

  #Make headers publically visible
  public_deps = [ ":dawn_native_headers" ]

  deps = [
    ":dawn_native_sources",
    "${dawn_root}/src/common",
  ]
  sources = [ "DawnNative.cpp" ]
  configs = [ ":dawn_native_internal" ]
  public_configs = [ ":dawn_native_weak_framework" ]
  defines = [
    "DAWN_NATIVE_SHARED_LIBRARY",
    "DAWN_NATIVE_IMPLEMENTATION",
  ]
}

if (is_win) {
  ie_nn_dll = "ie_nn_c_api.dll"
  os_folder = "Windows64"
} else if (is_linux) {
  ie_nn_dll = "libie_nn_c_api.so"
  os_folder = "Linux64"
}
if (is_win || is_linux) {
  ie_nn_dll_path = "//src/dawn_native/ie/ienn/lib/${os_folder}"
  copy("copy_ie_nn_dll") {
    sources = [ "${ie_nn_dll_path}/${ie_nn_dll}" ]
    outputs = [ "$root_out_dir/{{source_file_part}}" ]
  }
}
